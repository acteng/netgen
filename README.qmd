---
title: Generate origin-destination data and route networks
format: gfm
---

```{r}
#| eval: false
#| echo: false
#| label: repo-setup
# Create data-raw and data folders
usethis::use_data_raw()
usethis::use_description()
usethis::use_r("get.R")
usethis::use_package("sf")
usethis::use_package("simodels")
#     ‘fs’ ‘lubridate’ ‘stringr’
usethis::use_package("fs")
usethis::use_package("lubridate")
usethis::use_package("stringr")
devtools::check()
# Set-up pkgdown + ci
usethis::use_pkgdown()
usethis::use_github_action("pkgdown")
# Setup gh pages:
usethis::use_github_pages()

# generate example datasets:
zones_york = sf::read_sf("lsoas_york.geojson")
destinations_york = sf::read_sf("school_minimal.geojson")
usethis::use_data(zones_york, destinations_york, overwrite = TRUE)
```

```{r}
devtools::load_all()
```

```{r}
library(tidyverse)
# Set theme to void:
theme_set(theme_void())
```


```{r}
max_dist = 5000 # meters
od_from_si_full = simodels::si_to_od(zones_york, destinations_york)
od_from_si = simodels::si_to_od(zones_york, destinations_york, max_dist = max_dist)
```

```{r}
#| layout-ncol: 2
m1 = od_from_si_full |>
  ggplot() +
  geom_sf(alpha = 0.1)
m2 = od_from_si |>
  ggplot() +
  geom_sf(alpha = 0.1)
m1
m2
```


```{r}
od = read_csv("od_york.csv")
gravity_model = function(beta, d, m, n) {
  m * n * exp(-beta * d / 1000)
} 
# perform SIM
od_res = si_calculate(
  od_from_si,
  fun = gravity_model,
  d = distance_euclidean,
  m = destination_n_pupils,
  n = destination_n_pupils,
  constraint_production = origin_all,
  beta = 0.9
  )
od_model1 = 
```



