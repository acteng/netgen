---
title: "SchoolRoutes: An approach for data-driven investment in safe routes to school"
# For Quarto version:
format: html
#   html:
#     embed-resources: true
execute:
  echo: false
  message: false
  warning: false
  cache: true
# output:
#   rmarkdown::html_vignette:
#     number_sections: true
# vignette: >
#   %\VignetteIndexEntry{SchoolRoutes: An approach for data-driven investment in safe routes to school}
#   %\VignetteEngine{knitr::rmarkdown}
#   %\VignetteEncoding{UTF-8}
bibliography: references.bib
author:
   - name: Robin Lovelace
     affiliation: Active Travel England and University of Leeds, UK
   - name: Sam Holder
     affiliation: Active Travel England
   - name: Emma Vinter
     affiliation: Active Travel England
   - name: Chris Conlan
     affiliation: Active Travel England and The Alan Turing Institute
   - name: Dustin Carlino
     affiliation: Active Travel England and The Alan Turing Institute
---

```{r, eval=FALSE}
#| eval: false
# View the results with:
browseURL("schoolroutes.html")
# In website:
pkgdown::build_site(here::here(""))
browseURL("../docs/articles/schoolroutes.html")
```

```{r, include = FALSE}
#| eval: false
knitr::opts_chunk$set(
  echo = FALSE,
  message = FALSE,
  warning = FALSE,
  collapse = TRUE,
  comment = "#>",
  fig.width = 6,
  # Figures centre:
  fig.align = "center"
)
```

```{r setup}
library(netgen)
```

```{r}
library(sf)
library(tidyverse)
library(tmap)
library(ggplot2)
# # Get the datasets, see: https://github.com/acteng/netgen/releases/tag/v0.1.0
# Automate data download if you have gh installed and authorised with:
```

# Introduction

This outlines the methods and preliminary findings of the SchoolRoutes project.
See the [project charter](https://departmentfortransportuk.sharepoint.com/:w:/r/sites/ATE/Data%20%20Analysis/Digital/projects/atum/schoolroutes/Project%20Charter/project_charter_schoolroutes.docx?d=w27b2cd1af6d74e7fb789f5039f8286b0&csf=1&web=1&e=LsZ7Mi) for the project's aims, objectives, and scope.

There is a large and growing body of evidence on the relationships between active travel, physical activity, and positive environmental, economic, social and health outcomes.
Research supporting the Propensity to Cycle Tool (PCT) project, based on 2010/2011 English travel to school data, with the number of trips by mode at the origin-destination level, for example found that there was substantial unmet potential for cycling to school.
Based on data from The Netherlands and considering English trip distances and hills, a 22-fold increase was found to be possible under the Go Dutch scenario, associated with a 57% increase in physical activity for pupils at state run primary and secondary schools @goodman_scenarios_2019.

While the PCT --- and associated website which provides data downloads and evidence in a map-based web application hosted at [www.pct.bike](https://www.pct.bike) --- has been widely used by local authorities and other stakeholders, there are several reasons to revisit the issue of mode shift potential for travel to school, and the specific question of active travel potential, now:

-   School catchments and travel patterns have changed substantially since the 2010/2011 data on which @goodman_scenarios_2019 was based. More recent travel data can overcome a major limitation of that study by presenting current transport patterns to school.
-   The travel to school layer in the PCT described by @goodman_scenarios_2019 provided only a single metric for segments on the road network: cycling potential (under a range of scenarios), without reference to key infrastructure datasets that could be vital when prioritising local interventions and identifying where 'pinch points' are in the network.
-   The pandemic has seen an [alarming increase in childhood obesity rates and inequalities](https://twitter.com/TheMooreLab/status/1492883858450169857), as shown in Figure 1. This has pushed active travel for kids up the political agenda.
-   The travel to school layer in the original PCT resulted in a sparse network in some places. This can be overcome using new methods for disaggregating OD pairs to show diffuse residential networks [@lovelace_jittering_2022b].
-   Perhaps most importantly, evidence presented in the PCT omitted the potential for walking to school, which is likely to be more important for shorter trips and for younger children, especially in the near term.

On the policy side, and as part of the UK Government's Health Mission, health and wellbeing for young people has risen up the political agenda.
'School Streets' interventions featured prominently in all rounds of the Active Travel Fund (ATF) bids, yet there is a lack of evidence to support safe routes to school and where they should be located at the local level.
More broadly, strategic active travel networks have already largely been designed, as part of the LCWIP process, while cost-effective interventions that fix 'weak links' in quiet/beginner networks have received less attention.

```{r obesdep, fig.height=3, fig.width=6}
#| label: fig-obesdep
#| fig-cap: "Childhood obesity rates in most and least deprived areas over time. Source: National Child Measurement Programme."
# t11_raw = readxl::read_excel("../../schoolroutes_10ds/nat-chil-meas-prog-eng-2020-2021-tab.xlsx", sheet = "Table 11", skip = 13)
# t11_raw = readr::read_csv("nat-chil-meas-prog-eng-2020-2021-tab.csv", skip = 13)
# t11 = t11_raw %>% 
#   janitor::clean_names()
# # names(t11)
# names(t11)[2:3] = c("class", "year")
# t11_most_deprived = t11 %>%
#   select(class, year, Prevalence = prevalence_4) %>%
#   fill(class) %>% 
#   filter(str_detect(string = class, pattern = "Reception|Year")) %>% 
#   slice(-c(1:2)) %>% 
#   mutate(year = as.numeric(str_sub(string = year, start = 1, end = 4))) %>% 
#   mutate(`IMD decile` = "Most deprived IMD decile")
# t11_least_deprived = t11 %>%
#   select(class, year, Prevalence = prevalence_8) %>% 
#   fill(class) %>% 
#   filter(str_detect(string = class, pattern = "Reception|Year")) %>% 
#   slice(-c(1:2)) %>% 
#   mutate(year = as.numeric(str_sub(string = year, start = 1, end = 4))) %>% 
#   mutate(`IMD decile` = "Least deprived IMD decile")
# t11_most_least = bind_rows(t11_most_deprived, t11_least_deprived)
# readr::write_csv(t11_most_least, "t11_most_least.csv")

t11_most_least = readr::read_csv("t11_most_least.csv")
# t11$class
t11_most_least %>% 
  ggplot(aes(year, Prevalence, colour = class)) +
  geom_line() +
  geom_vline(xintercept = 2019, colour = "grey", lty = 2) +
  xlab("Academic year starting") +
  ylab("% Obese") +
  ylim(c(0, NA)) +
  # Rotate x-axis labels:
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
  scale_x_continuous(breaks = seq(from = 2006, to = 2020, by = 2)) +
  facet_grid(~ `IMD decile`)
# theme void:
```

# Data and methods

The approach outlined in this paper uses the following datasets:

-   Origin-destination (OD) data on travel to school from the Department for Education (DfE) from Lower Super Output Area (LSOA) to schools (non-sensitive simulated OD datasets are used in the open access version of this paper).
-   Data on state-run schools, including their locations, type (primarily primary, secondary), and other characteristics, from the Get Information about Schools (GIAS) service.
-   OpenStreetMap (OSM) data for the road network, with value-added by routing software such as `od2net` to pre-process the data and generate route networks.
-   Elevation data, enabling hilliness to be factored into walking and cycling potential estimates.
-   Datasets from the Modeshift Stars programme, which provides data on the number of trips to school by mode for a sample of schools in England (not currently used).

A methodological limitation of the PCT approach was that it used only zone centroids as trip origins, which can lead to a 'spider's web' of routes that do not reflect the actual routes taken by children to school.
To overcome this, the approach taken in this paper is to disaggregate the OD data, modelling multiple origins or 'subpoints' within each zone, to better represent the geographic distribution of trips to school.

For each OD pair, the number of trips that could be walked or cycled is estimated based on route characteristics.
For walking, the proportion of trips that can be walked ($p_{\text{walk}}$) is modelled as a simple exponential decay function of distance, with parameters specifying the rate of decay (the exponent) and the maximum proportion of trips that can be walked, building on work by [@iacono2010]:

$$
p_{\text{walk}} = min(\exp(-\text{distance} \times \text{exponent}), \text{upper\_limit})
$$

For cycling, the proportion of trips that can be cycled is based on the Go Dutch scenario in the Propensity to Cycle Tool (PCT) project [@goodman_scenarios_2019].
These uptake functions are illustrated in the figures below.

```{r decay-walk, fig.height=3, out.width="75%", fig.show="hold"}
#| label: fig-decay-walk
#| fig-cap: Uptake functions for walking to school, by distance, in baseline and Go Active scenarios.
uptake_walk_school_baseline = function(distance, upper_limit = 0.7, exponent = 1.3) {
  p = exp(-distance * exponent)
  p[p > upper_limit] = upper_limit
  p
}
uptake_walk_school_goactive = function(distance, upper_limit = 0.9, exponent = 0.8) {
  uptake_walk_school_baseline(distance, upper_limit, exponent)
}
distance = seq(0, 5, by = 0.1)
uptake_df = data.frame(
  distance = distance
)
p_baseline_school = uptake_walk_school_baseline(distance)
p_goactive_school = uptake_walk_school_goactive(distance)
uptake_df = rbind(
  cbind(uptake_df, scenario = "Baseline", pwalk = p_baseline_school),
  cbind(uptake_df, scenario = "Go Active", pwalk = p_goactive_school)
)
ggplot(uptake_df) +
  geom_line(aes(
    distance,
    pwalk,
    linetype = scenario
  )) +
  scale_x_continuous("Distance (km)") +
  scale_y_continuous("Proportion of trips made by walking", labels = scales::percent)
```

```{r}
#| fig-cap: Uptake functions for cycling to school, by distance and hilliness, in baseline and Go Dutch scenarios.
#| layout-ncol: 2
# Previous info:
# r decay-cycle, fig.height=3, out.width="50%", fig.show="hold"
library(pct)
max_distance = 20
distances = 1:max_distance
max_hilliness = 5
hilliness = 0:max_hilliness
uptake_df = data.frame(
  distances = rep(distances, times = max_hilliness + 1),
  hilliness = rep(hilliness, each = max_distance)
)
p_godutch_school = uptake_pct_godutch_school2(
    distance = uptake_df$distances,
    gradient = uptake_df$hilliness
    )
p_godutch = uptake_pct_govtarget_school2(
    distance = uptake_df$distances,
    gradient = uptake_df$hilliness
    )
uptake_df = rbind(
  cbind(uptake_df, scenario = "Go Dutch", pcycle = p_godutch_school),
  cbind(uptake_df, scenario = "Baseline", pcycle = p_godutch)
)
ggplot(uptake_df) +
  geom_line(aes(
    distances,
    pcycle,
    linetype = scenario,
    colour = as.character(hilliness)
  )) +
  scale_x_continuous("Distance (km)") +
  scale_y_continuous("Proportion of trips made by cycling", labels = scales::percent) +
  scale_color_discrete("Gradient (%)")

distances = c(3, 6, 10)
hilliness = seq(0, 10, by = 0.2)
uptake_df = 
  data.frame(
    expand.grid(distances, hilliness)
  )
names(uptake_df) = c("distances", "hilliness")
p_godutch_school = uptake_pct_godutch_school2(
    distance = uptake_df$distances,
    gradient = uptake_df$hilliness
    )
p_godutch = uptake_pct_govtarget_school2(
    distance = uptake_df$distances,
    gradient = uptake_df$hilliness
    )
uptake_df = rbind(
  cbind(uptake_df, scenario = "Go Dutch", pcycle = p_godutch_school),
  cbind(uptake_df, scenario = "Baseline", pcycle = p_godutch)
)
ggplot(uptake_df) +
  geom_line(aes(
    hilliness,
    pcycle,
    linetype = scenario,
    colour = formatC(distances, flag = "0", width = 2)
  )) +
  scale_x_continuous("Gradient (%)") +
  scale_y_continuous("Proportion of trips made by cycling", labels = scales::percent) +
  scale_color_discrete("Distance (km)")
```

```{r, include=FALSE}
# Spot checks:
# See https://github.com/ITSLeeds/pct/blob/e630464efeaef539b18647b10745b863c9cd9948/R/uptake.R
#' # Take an origin destination (OD) pair between an LSOA centroid and a
#' # secondary school. In this OD pair, 30 secondary school children travel, of
#' # whom 3 currently cycle. The fastest route distance is 3.51 km and the
#' # gradient is 1.11%. The
#' # gradient as centred on Dutch hilliness levels is 1.11 – 0.63 = 0.48%.
#' # The observed number of cyclists is 2. ... Modelled baseline= 30 * .0558 = 1.8.
#' uptake_pct_govtarget_school2(3.51, 1.11)
#' [1] 0.05584607
#' #' # pcycle = exp(1.953)/(1 + exp(1.953)) = .8758, or 87.58%.
#' uptake_pct_godutch_school2(3.51, 1.11)
```

The figures above show that the proportion of trips made by walking and cycling for each OD pair depends on a function of distance for walking, and a function of the trip distance and hilliness for cycling.
It is important to apply these function to the *route* distance and hilliness rather than the Euclidean distance, as the actual distance travelled can be much longer than the Euclidean distance, especially in areas with complex road networks or hilly terrain.
After calculating the proportion of trips walked or cycled per route, the proportion is multiplied by the estimated *total* number of trips by *all modes* to estimate the number of trips that could be walked or cycled along each route.
The route-level counts are then aggregated in a process that can be referred to as "travel flow aggregation" [@morgan_travel_2020].

# Case study: York

```{r, include=FALSE}
# We'll start by saving the `zones` data in the `input` folder:
origin_zones = netgen::zones_york
names(origin_zones)
names(origin_zones)[1] = "name"
dir.create("input", showWarnings = FALSE)
sf::write_sf(origin_zones, "input/zones.geojson", delete_dsn = TRUE)
```

The following case study demonstrates how the approach works in practice, using the city of York as an example.
<!-- The following code was used to prepare the data with the `od2net` R package (see the paper's [source code](https://github.com/acteng/netgen/blob/main/vignettes/schoolroutes.Rmd) for full reproducible details): -->

```{r}
od2net::make_osm(zones_file = "input/zones.geojson")
od2net::make_origins()
# Optionally, get elevation data:
# netgen:::make_elevation()
destinations = netgen::destinations_york # Provided in the R package
names(destinations)[1] = "name"
destinations = destinations[1]
class(destinations$name) = "character"
sf::write_sf(destinations, "input/destinations.geojson", delete_dsn = TRUE)
```

<!-- We'll save the OD dataset in the required format: -->

```{r}
# Save the OD dataset:
od_geo = sf::read_sf("https://github.com/acteng/netgen/releases/download/v0.1.0/res_output.geojson")
od = od_geo |>
  sf::st_drop_geometry() |>
  transmute(from = O, to = as.character(D), count = round(trips_modelled))
readr::write_csv(od, "input/od.csv", quote = "all")
```

After saving necessary files in the `input` folder, as required by the `od2net` Rust crate, a 'config file' is required to run the model.
We used the following configuration options for this case study:

<!-- The `od2net` package requires a configuration file to run. We will use the following configuration file: -->

```{r}
readLines("config_pct_godutch_schools.json") |>
  cat(sep = "\n")
```

```{r}
#| eval: false
system("od2net --version")
```

If the previous lines of code run successfully and you have `od2net` installed, the route network dataset can be generated with the following command, which generates the following message:

```{r, engine='bash', eval=FALSE, echo=FALSE}
#| eval: false
od2net config_pct_govtarget.json
mv output output_govtarget
mkdir output
```

```{r, engine='bash', eval=FALSE, echo=TRUE}
#| eval: false
od2net config_pct_godutch_schools.json
# Outputs:
# Input: Test data for SchoolRoutes project.
# - Origins: 19,258
# - Destinations: 62
# - Requests: 25,515
# - Requests (succeeded): 25,364
# - Requests (failed because same endpoints): 12
# - Requests (failed because no path): 139
# - Edges with a count: 37,388
# - Total distance on not allowed roads: 2.4 km
# - Total distance on LTS 1 roads: 12868.2 km
# - Total distance on LTS 2 roads: 18057.4 km
# - Total distance on LTS 3 roads: 25217.0 km
# - Total distance on LTS 4 roads: 6634.4 km
```

```         

```

```{r}
#| eval: false
#| echo: false
# Upload files to GitHub:
file.copy("output_govtarget/output.geojson", "output_pct_govtarget.geojson", overwrite = TRUE)
system("gh release upload v0.1.0 output_pct_govtarget.geojson --clobber")
# Same with pmtiles:
file.copy("output_govtarget/rnet.pmtiles", "output_pct_govtarget.pmtiles", overwrite = TRUE)
system("gh release upload v0.1.0 output_pct_govtarget.pmtiles", intern = TRUE)

# GoDutch:
file.copy("output/output.geojson", "output_pct_godutch.geojson", overwrite = TRUE)
system("gh release upload v0.1.0 output_pct_godutch.geojson --clobber")
file.copy("output/rnet.pmtiles", "output_pct_godutch.pmtiles", overwrite = TRUE)
system("gh release upload v0.1.0 output_pct_godutch.pmtiles --clobber")
```

The `od2net` program generates the following files and places them in the `output` folder:

-   `output.geojson`: the route network dataset.
-   `rnet.pmtiles`: a compressed version of the route network dataset for interactive visualisation in web apps.
-   `counts.csv`: a CSV file with the counts of trips on each route segment.
-   `failed_requests.geojson`: a geojson file with the failed requests (i.e. those that could not be routed).

```{r}
#| eval: false
list.files("output")
#> [1] "counts.csv"              "failed_requests.geojson"
#> [3] "output.geojson"          "rnet.pmtiles"
```

The most relevant of these is the 'output.geojson' file, which is also provided as a compressed `pmtiles` file.
You can visualise the results in the web app hosted at [od2net.org](https://od2net.org) by uploading the `output.pmtiles` file, resulting in an interactive map of the routes, as shown in the Figure below.
<!-- @ref(fig:od2net). -->

```{r od2net, fig.cap="Routes generated by the SchoolRoutes project."}
#| echo: false
knitr::include_graphics("od2net.png")
```

<!-- We can also visualise the data with the following code in R: -->

```{r}
#| echo: false
output_file_godutch = "https://github.com/acteng/netgen/releases/download/v0.1.0/output_pct_godutch.geojson"
```

```{r}
#| eval: false
output_file_godutch = "output/output.geojson"
```

```{r}
rnet_godutch = sf::read_sf(output_file_godutch)
rnet_godutch$length_m = sf::st_length(rnet_godutch) |>
  as.numeric()
```

```{r}
stratford_way = rnet_godutch |>
  dplyr::filter(str_detect(osm_tags, "Stratford"))
# stratford_way
stratford_way_buffer = st_buffer(stratford_way, 500)
rnet_stratford = rnet_godutch[stratford_way_buffer, op = st_within]
```

```{r rnet-base, fig.cap="Routes generated by the SchoolRoutes project, with colours representing selected variables."}
# nrow(rnet_godutch)
# names(rnet_godutch)
plot(rnet_stratford, logz = TRUE)
```

The route network object visualised <!-- in Figure @ref(fig:rnet-base) --> above, which represents the results within a 500 m buffer around Stratford Way, next to Huntingdon School, has the following variables:

```         
 [1] "backward_cost"     "count"             "destination_count"
 [4] "forward_cost"      "length"            "lts"              
 [7] "nearby_amenities"  "node1"             "node2"            
[10] "origin_count"      "osm_tags"          "way"              
[13] "geometry" 
```

Of these, `count`, `lts`, `osm_tags`, and `way` are the most relevant.
Let's take a look at these for a sample of 3 rows <!-- (see Table @ref(tab:rnet-sample)): --> (see Table below):

```{r rnet-sample}
set.seed(42)
rnet_godutch |>
  dplyr::filter(count > 1) |>
  dplyr::slice_sample(n = 3) |>
  dplyr::select(count, lts, osm_tags, way, length) |>
  knitr::kable(caption = "Sample of the route network dataset.")
```

As shown above, the `osm_tags` field has all the OSM tags in JSON format, which can be extrated as follows with `jsonlite::fromJSON`:

```{r, echo=TRUE}
rnet_godutch$osm_tags[1]
jsonlite::fromJSON(rnet_godutch$osm_tags[1])
```

<!-- Let's create a minimal version of the dataset for future plots: -->

```{r}
rnet_godutch_clean = rnet_godutch |>
  dplyr::transmute(count = as.integer(count), way, lts = as.character(lts), length, osm_tags)
rnet_godutch_top = rnet_godutch_clean |>
  dplyr::slice_max(count, n = 5000) |>
  dplyr::arrange(count)
```

The output dataset can be visualised with well-known data science tools, such as the `ggplot2` R package, as follows shown in <!-- Figure @ref(fig:rnet-ggplot), --> Figure below, which is generated with the reproducible code below:

```{r rnet-ggplot, fig.cap="Routes with the highest number of trips under the Government Target scenario.", echo=TRUE}
library(ggplot2)
theme_set(theme_void())
ggplot(rnet_godutch_top) +
  geom_sf(aes(color = lts, linewidth = count)) +
  scale_colour_viridis_d(direction = -1) +
  theme_void()
```

From the data we can create interactive maps, showing both the

```{r}
# mapview::mapview(rnet_godutch_top, zcol = "count", linewidth = rnet_godutch$count)
```

```{r}
library(tmap)
tmap_mode("view")
m = tm_shape(rnet_godutch_top) +
  # tmap v3 style:
  # tm_lines(
  #   col = "lts",
  #   # col.scale = tm_scale(values = "viridis", breaks = c(0, 10, 20, 50, 200)*10),
  #   lwd = "count"
  #   ) +
  # tm_scale(9) # fails
  # tmap v2 style:
  tm_lines(col = "lts", palette = "-viridis", breaks = c(0, 10, 20, 50, 200)*10, lwd = "count", scale = 9) 
# m = qtm(rnet_godutch_top)
# m
```

```{r}
#| eval: false
# You can save and view the map as follows:
summary(rnet_godutch_top$count)
tmap_save(m, "output_pct_godutch.html")
browseURL("output_pct_godutch.html")
system("gh release upload v0.1.0 output_pct_godutch.html")
```

# Walking network

The same approach can be used to estimate walking to school potential, based on the all-mode flows to school contained in the OD data.

```{r, engine='bash', eval=FALSE, echo=FALSE}
#| eval: false
od2net config_pct_govtarget.json
mv output output_govtarget
mkdir output
```

```{r, engine='bash', eval=FALSE, echo=TRUE}
#| eval: false
# Create walking network:
od2net config_walking.json
mv output output_walking
mkdir output
```

```{r}
# setwd("vignettes")

output_file_walking = "output_walking/output.geojson"
rnet_walking = sf::read_sf(output_file_walking)
rnet_walking$length_m = sf::st_length(rnet_walking) |>
  as.numeric()

rnet_govtarget = sf::read_sf("output_govtarget/output.geojson")
rnet_govtarget$length_m = sf::st_length(rnet_govtarget) |>
  as.numeric()

rnet_walking_cycling = bind_rows(
  rnet_govtarget |>
    dplyr::mutate(mode = "cycling"),
  rnet_walking |>
    dplyr::mutate(mode = "walking")
)


# Plot for small region:
stratford_way_buffer_2km = st_buffer(stratford_way, 2000)
rnet_wc = rnet_walking_cycling[stratford_way_buffer_2km, op = st_within]

# Plot with tmap and facets:
m = tm_shape(rnet_wc) +
  tm_lines(
    col = "lts",
    col.scale = tm_scale_categorical(values = "-RdBu"),
    col.legend = tm_legend(orientation = "landscape"),
    lwd = "count",
    lwd.legend = NULL,
    lwd.scale = tm_scale_continuous(values.scale = 9)
  ) +
  tm_facets("mode")
tmap_mode("plot")
m
```

# Prioritising investment

A simple way to prioritise investment based on the route network outputs shown above is to find the LTS3 and LTS4 roads with the greatest potential.
A key output from the tool will be route network data that contains both the potential number of trips and the LTS classification of each road segment.
Taking a hypothetical scenario in which there is sufficient funding for investment in 5 school streets, targetting the worst (LTS4) roads, the data allows us to identify the roads presented in <!-- Table @ref(tab:rnet-godutch-top5) and Figure @ref(fig:rnet-godutch-top5-map). --> the Table below and the Figure below.

```{r rnet-godutch-top5-map, fig.cap="Top 5 routes with the highest number of trips under the Government Target scenario.", echo=TRUE}

rnet_godutch_lts4_named = rnet_godutch_clean |>
  filter(!is.na(osm_tags)) |>
  dplyr::mutate(osm_tags_list = purrr::map(osm_tags, jsonlite::fromJSON)) |>
  # Only keep those with names:
  filter(purrr::map_lgl(osm_tags_list, ~ "name" %in% names(.x))) |>
  dplyr::mutate(name = purrr::map_chr(osm_tags_list, ~ .x$name)) |>
  dplyr::filter(lts %in% c("4")) |>
  dplyr::arrange(desc(count))
min_count = 100
rnet_godutch_top_5 = rnet_godutch_lts4_named |>
  dplyr::filter(count > min_count) |>
  # Exclude name = ring road:
  dplyr::filter(!str_detect(name, "Ring Road")) |>
  dplyr::group_by(name) |>
  dplyr::summarise(`Total (km)` = sum(count * length) / 1000, .groups = "drop") |>
  dplyr::arrange(desc(`Total (km)`)) |>
  dplyr::slice_head(n = 5)
m = tm_shape(rnet_godutch_top_5) +
  tm_lines(
    col = "Total (km)",
    palette = "-viridis",
    lwd = 9
  ) +
  # Add schools:
  tm_shape(destinations) +
  tm_dots(col = "black", size = 0.5) +
  tm_scale_bar()
  # tm_lines(
  #   col = "Total (km)",
  #   col.scale = tm_scale(values = "viridis", breaks = c(0, 10, 20, 50, 200)),
  #   lwd = 9
  # )
# m
```

```{r, eval=FALSE}
#| eval: false
tmap_save(m, "output_pct_godutch_top5.html")
browseURL("output_pct_godutch_top5.html")
system("gh release upload v0.1.0 output_pct_godutch_top5.html --clobber")
```

```{r rnet-godutch-top5, tab.cap="Top 5 routes with the highest number of trips under the Government Target scenario.", echo=TRUE}
rnet_godutch_top_5 |>
  sf::st_drop_geometry() |>
  knitr::kable()
```

# Sense checking the results

## Comparing with the OD data

We'll do some initial checks by finding by comparing the total number of trips and distance travelled represented in the OD dataset with the output of the model:

```{r}
od_geo$length = sf::st_length(od_geo) |> as.numeric()
# sum(od_geo$trips_modelled) # 26k
distance_euclidean_total = sum(od_geo$length * od_geo$trips_modelled)
# distance_euclidean_total # 49,000 km
```

The total distance travelled according to the OD data is `r round(distance_euclidean_total / 1000)` \|\> format(big.mark = ",")\` km

```{r}
wm = weighted.mean(od_geo$length, od_geo$trips_modelled) # 1.9 km
```

The weighted mean distance travelled is `r round(wm / 1000, 1) |> format(big.mark = ",")` km.

```{r}
total_euclidean_cycled = distance_euclidean_total * 1.3 * 0.5
# total_euclidean_cycled # just over 3,000 km
```

Assuming a trip diversion factor of 1.4 and that on average 50% of the trips are made by cycling under the Government Target scenario for the short distances travelled to school, we can estimate the total number distance travelled by bike to school on a typical school day as `r round(total_euclidean_cycled / 1000) |> format(big.mark = ",")` km.

```{r}
rnet_godutch = sf::read_sf(output_file_godutch)
rnet_godutch$length = sf::st_length(rnet_godutch) |> as.numeric()
total_rnet = sum(rnet_godutch$count * rnet_godutch$length, na.rm = TRUE)
# round(total_rnet / 1e3)
```

```{r}
output_file_govtarget = "https://github.com/acteng/netgen/releases/download/v0.1.0/output_pct_govtarget.geojson"
rnet_govtarget = sf::read_sf(output_file_govtarget)
rnet_govtarget$length = sf::st_length(rnet_govtarget) |> as.numeric()
total_rnet_govtarget = sum(rnet_govtarget$count * rnet_govtarget$length, na.rm = TRUE)
```

The equivalent for the route network output under the Go Dutch scenario is `r round(total_rnet / 1e3) |> format(big.mark = ",")` km.
Note that the values presented above are based on *synthetic* OD data, which may not be representative of the actual travel patterns in York.

Let's compare with the number who cycle under the less ambitious Government Target scenario: The total distance travelled under the Government Target scenario is `r round(total_rnet_govtarget / 1e3) |> format(big.mark = ",")` km.

## Comparing with PCT data

# Conclusions and next steps



# References