[{"path":"https://acteng.github.io/netgen/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 netgen authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://acteng.github.io/netgen/articles/schoolroutes.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"SchoolRoutes: An approach for data-driven investment in safe routes to school","text":"large growing body evidence modal split, physical activity, relationships social/economic/policy/environmental factors transport behaviour. recent study based data England explored cycling school based 2010/2011 origin-destination data, finding substantial unmet potential, 22-fold increase Go Dutch scenario associated 57% increase physical activity pupils state run primary secondary schools Goodman et al. (2019). raises question: revisit issue mode shift potential travel school, specific question active travel potential, now? Three broad factors make timely topic: School catchments travel patterns changed substantially since 2010/2011 data Goodman et al. (2019) based. recent travel data can overcome major limitation study presenting current transport patterns school. travel school layer PCT described Goodman et al. (2019) provided single metric segments road network: cycling potential (range scenarios), without reference key infrastructure datasets vital prioritising local interventions identifying ‘pinch points’ network. pandemic seen alarming increase childhood obesity rates inequalities, shown Figure @ref(fig:obesdep). pushed active travel kids political agenda. travel school layer original PCT resulted sparse network places. can overcome using new methods disaggregating OD pairs show diffuse residential networks (Lovelace, Félix, Carlino 2022). broader reason focussing cycling potential infrastructure young people prioritisation fixing weak links quiet/beginner networks rather ‘skeleton’ arterial routes can support inclusive design. Childhood obesity rates least deprived areas time. Source: National Child Measurement Programme","code":""},{"path":"https://acteng.github.io/netgen/articles/schoolroutes.html","id":"case-study-york","dir":"Articles","previous_headings":"","what":"Case study: York","title":"SchoolRoutes: An approach for data-driven investment in safe routes to school","text":"case study York , use Lower Super Output Area (LSOA) data basis origin-destination data od2net package generate routes. following code used prepare data od2net R package (see paper’s source code full reproducible details): saving necessary files input folder, required od2net Rust crate, ‘config file’ required run model. used following configuration options case study: previous lines code run successfully od2net installed, route network dataset can generated following command, generates following message: od2net program generates following files places output folder: output.geojson: route network dataset. rnet.pmtiles: compressed version route network dataset interactive visualisation web apps. counts.csv: CSV file counts trips route segment. failed_requests.geojson: geojson file failed requests (.e. routed). relevant ‘output.geojson’ file, also provided compressed pmtiles file. can visualise results web app hosted od2net.org uploading output.pmtiles file, resulting interactive map routes, shown Figure @ref(fig:od2net). Routes generated SchoolRoutes project. can also visualise data following code R: route network object visualised Figure @ref(fig:rnet-base) following variables: , count, lts, osm_tags, way relevant. Let’s take look sample 3 rows (see Table @ref(tab:rnet-sample)): Sample route network dataset. shown , osm_tags field OSM tags JSON format, can extrated follows jsonlite::fromJSON: output dataset can visualised well-known data science tools, ggplot2 R package, follows shown Figure @ref(fig:rnet-ggplot), generated reproducible code : Routes highest number trips Government Target scenario. Let’s create interactive map tmap: can save view map follows:","code":"#>  [1] \"LSOA21CD\"     \"LSOA21NM\"     \"total\"        \"f0_to_15\"     \"f16_to_29\"    #>  [6] \"f30_to_44\"    \"f45_to_64\"    \"f65_and_over\" \"m0_to_15\"     \"m16_to_29\"    #> [11] \"m30_to_44\"    \"m45_to_64\"    \"m65_and_over\" \"geometry\" od2net::make_osm(zones_file = \"input/zones.geojson\") od2net::make_origins() # Optionally, get elevation data: # netgen:::make_elevation() destinations = netgen::destinations_york # Provided in the R package names(destinations)[1] = \"name\" destinations = destinations[1] class(destinations$name) = \"character\" sf::write_sf(destinations, \"input/destinations.geojson\", delete_dsn = TRUE) #> { #>   \"requests\": { #>     \"description\": \"Test data for SchoolRoutes project.\", #>     \"pattern\": { #>       \"ZoneToPoint\": { #>         \"zones_path\": \"zones.geojson\", #>         \"destinations_path\": \"destinations.geojson\", #>         \"csv_path\": \"od.csv\", #>          \"origin_zone_centroid_fallback\": false #>       } #>     }, #>     \"origins_path\": \"buildings.geojson\", #>     \"destinations_path\": \"destinations.geojson\" #>   }, #>   \"cost\": \"Distance\", #>   \"uptake\": \"GovTargetPCT\", #>   \"lts\": \"BikeOttawa\" #> } od2net run config_pct_govtarget.json Input: Test data for SchoolRoutes project. - Origins: 19,258 - Destinations: 62 - Requests: 25,515 - Requests (succeeded): 25,364 - Requests (failed because same endpoints): 12 - Requests (failed because no path): 139 - Edges with a count: 37,388 - Total distance on not allowed roads: 2.4 km - Total distance on LTS 1 roads: 12868.2 km - Total distance on LTS 2 roads: 18057.4 km - Total distance on LTS 3 roads: 25217.0 km - Total distance on LTS 4 roads: 6634.4 km [1] \"backward_cost\"     \"count\"             \"destination_count\"  [4] \"forward_cost\"      \"length\"            \"lts\"                [7] \"nearby_amenities\"  \"node1\"             \"node2\"             [10] \"origin_count\"      \"osm_tags\"          \"way\"               [13] \"geometry\" rnet_govtarget$osm_tags[1] #> [1] \"{ \\\"highway\\\": \\\"tertiary\\\", \\\"lit\\\": \\\"yes\\\", \\\"maxspeed\\\": \\\"30 mph\\\", \\\"name\\\": \\\"Broadway\\\", \\\"sidewalk\\\": \\\"both\\\", \\\"source\\\": \\\"survey\\\", \\\"source:name\\\": \\\"Sign\\\", \\\"source_ref\\\": \\\"GPS\\\", \\\"surface\\\": \\\"asphalt\\\" }\" jsonlite::fromJSON(rnet_govtarget$osm_tags[1]) #> $highway #> [1] \"tertiary\" #>  #> $lit #> [1] \"yes\" #>  #> $maxspeed #> [1] \"30 mph\" #>  #> $name #> [1] \"Broadway\" #>  #> $sidewalk #> [1] \"both\" #>  #> $source #> [1] \"survey\" #>  #> $`source:name` #> [1] \"Sign\" #>  #> $source_ref #> [1] \"GPS\" #>  #> $surface #> [1] \"asphalt\" library(ggplot2) ggplot(rnet_govtarget_top) +   geom_sf(aes(color = lts, linewidth = count)) +   scale_colour_viridis_d(direction = -1) +   theme_void()"},{"path":"https://acteng.github.io/netgen/articles/schoolroutes.html","id":"prioritising-investment","dir":"Articles","previous_headings":"","what":"Prioritising investment","title":"SchoolRoutes: An approach for data-driven investment in safe routes to school","text":"simple way prioritise investment based route network outputs shown find LTS3 LTS4 roads greatest potential. key output tool route network data contains potential number trips LTS classification road segment. Taking hypothetical scenario sufficient funding investment 5 school streets, targetting worst (LTS4) roads, data allows us identify roads presented Table @ref(tab:rnet-govtarget-top5) Figure @ref(fig:rnet-govtarget-top5-map). Top 5 routes highest number trips Government Target scenario.","code":"rnet_govtarget_lts4_named = rnet_govtarget_clean |>   filter(!is.na(osm_tags)) |>   dplyr::mutate(osm_tags_list = purrr::map(osm_tags, jsonlite::fromJSON)) |>   # Only keep those with names:   filter(purrr::map_lgl(osm_tags_list, ~ \"name\" %in% names(.x))) |>   dplyr::mutate(name = purrr::map_chr(osm_tags_list, ~ .x$name)) |>   dplyr::filter(lts %in% c(\"4\")) |>   dplyr::arrange(desc(count)) rnet_govtarget_top_5 = rnet_govtarget_lts4_named |>   dplyr::group_by(name) |>   dplyr::summarise(`Total (km)` = sum(count * length) / 1000, .groups = \"drop\") |>   dplyr::arrange(desc(`Total (km)`)) |>   dplyr::slice_head(n = 5) m = tm_shape(rnet_govtarget_top_5) +   tm_lines(     col = \"Total (km)\",     col.scale = tm_scale(values = \"viridis\", breaks = c(0, 10, 20, 50, 200)),     lwd = 9   ) m rnet_govtarget_top_5 |>   sf::st_drop_geometry() |>   knitr::kable()"},{"path":"https://acteng.github.io/netgen/articles/schoolroutes.html","id":"sense-checking-the-results","dir":"Articles","previous_headings":"","what":"Sense checking the results","title":"SchoolRoutes: An approach for data-driven investment in safe routes to school","text":"results make sense? ’ll find comparing total number trips distance travelled represented OD dataset output model: Let’s sense check weighted average trip distance: Assuming trip diversion factor 1.3 5% trips made cycling Government Target scenario short distances travelled school, can estimate total number trips distance travelled: equivalent route network output :","code":"#> [1] 25631 #> [1] 49270611 #> [1] 1922.305 #> [1] 3202590 #> [1] 4611"},{"path":"https://acteng.github.io/netgen/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Robin Lovelace. Author, maintainer.","code":""},{"path":"https://acteng.github.io/netgen/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lovelace R (2024). netgen: Generate Route Network Datasets Origin-Destination Data. R package version 0.0.0.9000https://acteng.github.io/netgen/ https://github.com/acteng/netgen, https://acteng.github.io/netgen/ https://github.com/acteng/netgen.","code":"@Manual{,   title = {netgen: Generate Route Network Datasets from Origin-Destination Data},   author = {Robin Lovelace},   year = {2024},   note = {R package version 0.0.0.9000https://acteng.github.io/netgen/ https://github.com/acteng/netgen},   url = {https://acteng.github.io/netgen/ https://github.com/acteng/netgen}, }"},{"path":"https://acteng.github.io/netgen/index.html","id":"generate-origin-destination-data-for-route-network-generation","dir":"","previous_headings":"","what":"Generate Route Network Datasets from Origin-Destination Data","title":"Generate Route Network Datasets from Origin-Destination Data","text":"input network generation approaches demonstrated repo origin-destionation data. many sources OD data, see odgen way generate synthetic OD data ’ll use reproducible code .","code":""},{"path":"https://acteng.github.io/netgen/index.html","id":"setup","dir":"","previous_headings":"","what":"Setup","title":"Generate Route Network Datasets from Origin-Destination Data","text":"reproduducibility, setup Docker container dependencies needed run code . easiest way run code develop new code repo may GitHub Codespaces can accessed via github.com/codespaces/new. Pull latest version container following: open project .devcontainer.json file Visual Studio Code (see VS Code docs ). allow run code README following command: haven’t got project running container, can run code local environment. run code need R Docker installed. installed R, can install packages ’ll use follows: also install couple package CRAN: getting software installed, load packages ’ll use follows:","code":"docker pull ghcr.io/geocompx/docker:rust quarto::quarto_render(\"README.qmd\") # Install pak if not already installed: if (!requireNamespace(\"pak\", quietly = TRUE)) {   install.packages(\"pak\") } pkgs = c(\"sf\", \"tidyverse\", \"tmap\", \"pak\") pkgs_to_install = pkgs[!pkgs %in% installed.packages()] if (length(pkgs_to_install) > 0) {   pak::pkg_install(pkgs_to_install) } # Load the packages with vapply: vapply(pkgs, require, logical(1), character.only = TRUE) sf tidyverse      tmap       pak       TRUE      TRUE      TRUE      TRUE pak::pkg_install(\"acteng/netgen\") pak::pkg_install(\"Urban-Analytics-Technology-Platform/od2net/r\") library(sf) library(tidyverse) library(tmap) # # Get the datasets, see: https://github.com/acteng/netgen/releases/tag/v0.1.0 # Automate data download if you have gh installed and authorised with: # theme void: theme_set(theme_void())"},{"path":"https://acteng.github.io/netgen/index.html","id":"data-import-and-visualisation","dir":"","previous_headings":"","what":"Data import and visualisation","title":"Generate Route Network Datasets from Origin-Destination Data","text":"’s worth importing visualising OD datasets routing network generation stages.","code":"system(\"gh release list\") od = read_csv(\"res_output.csv\") head(od) # A tibble: 6 × 3   O              D trips_modelled   <chr>      <dbl>          <dbl> 1 E01013335 121266          6.37  2 E01013336 121266          3.26  3 E01013337 121266          4.57  4 E01013338 121266          6.46  5 E01013339 121266          2.95  6 E01013340 121266          0.124 od_geo = sf::read_sf(\"res_output.geojson\") od_geo |>   ggplot() +   geom_sf(aes(alpha = trips_modelled))"},{"path":"https://acteng.github.io/netgen/index.html","id":"od2net","dir":"","previous_headings":"","what":"od2net","title":"Generate Route Network Datasets from Origin-Destination Data","text":"Building code od2net R package, can generate files needed network generation stage. installed package, prepare input datasets run network-generation code generate output.geojson output.pmtiles outputs: running code container, already od2net package installed. Check following: run following code generate network: See run Docker ’re running commands .devcontainer don’t od2net installed. Run tool Docker follows: see following output folder: point can visualise pmtiles website od2net.org front-end application, shown .","code":"origin_zones = netgen::zones_york names(origin_zones) [1] \"LSOA21CD\"     \"LSOA21NM\"     \"total\"        \"f0_to_15\"     \"f16_to_29\"     [6] \"f30_to_44\"    \"f45_to_64\"    \"f65_and_over\" \"m0_to_15\"     \"m16_to_29\"    [11] \"m30_to_44\"    \"m45_to_64\"    \"m65_and_over\" \"geometry\" names(origin_zones)[1] = \"name\" sf::write_sf(origin_zones, \"input/zones_york.geojson\", delete_dsn = TRUE) od2net::make_osm(zones_file = \"input/zones_york.geojson\") Reading layer `zones' from data source    `/home/robin/github/acteng/netgen/input/zones.geojson' using driver `GeoJSON' Simple feature collection with 121 features and 1 field Geometry type: MULTIPOLYGON Dimension:     XY Bounding box:  xmin: -1.2237 ymin: 53.87459 xmax: -0.9196789 ymax: 54.05661 Geodetic CRS:  WGS 84 od2net::make_origins() # Optionally, get elevation data: # netgen:::make_elevation() destinations = netgen::destinations_york # Provided in the R package names(destinations)[1] = \"name\" destinations = destinations[1] class(destinations$name) = \"character\" sf::write_sf(destinations, \"input/destinations.geojson\", delete_dsn = TRUE) # Save the OD dataset: od = od_geo |>   sf::st_drop_geometry() |>   transmute(from = O, to = as.character(D), count = round(trips_modelled)) readr::write_csv(od, \"input/od.csv\", quote = \"all\") system(\"od2net --version\") system(\"od2net config.json --rng-seed 42\") # On Linux: sudo docker run -v $(pwd):/app ghcr.io/urban-analytics-technology-platform/od2net:main /app/config.json  --rng-seed 42 # On Windows: docker run -v %cd%:/app ghcr.io/urban-analytics-technology-platform/od2net:main /app/config.json  --rng-seed 42 fs::dir_tree(\"output\") output ├── counts.csv ├── failed_requests.geojson ├── output.geojson ├── rnet.pmtiles └── rnet_output_osrm_overline.geojson"},{"path":"https://acteng.github.io/netgen/index.html","id":"minimal-od2net-example","dir":"","previous_headings":"","what":"Minimal od2net example","title":"Generate Route Network Datasets from Origin-Destination Data","text":"purposes testing ’s worth","code":""},{"path":"https://acteng.github.io/netgen/index.html","id":"adjusting-uptake-functions","dir":"","previous_headings":"","what":"Adjusting uptake functions","title":"Generate Route Network Datasets from Origin-Destination Data","text":"example visualises trips school, just active travel trips.","code":""},{"path":"https://acteng.github.io/netgen/index.html","id":"other-approaches-to-network-generation","dir":"","previous_headings":"","what":"Other approaches to network generation","title":"Generate Route Network Datasets from Origin-Destination Data","text":"advantage od2net can generate network routes single step. approaches, need calculate routes first, shown .","code":""},{"path":"https://acteng.github.io/netgen/index.html","id":"routing","dir":"","previous_headings":"","what":"Routing","title":"Generate Route Network Datasets from Origin-Destination Data","text":"many ways calculate routes. simplest many cases calculate routing engine. Let’s interfaces OSRM routing engine first instance. Note: use od2net approach, can routing network generation stage single step, see .","code":""},{"path":"https://acteng.github.io/netgen/index.html","id":"osrm-basic","dir":"","previous_headings":"","what":"OSRM: basic","title":"Generate Route Network Datasets from Origin-Destination Data","text":"","code":"od_geo_top_100 = od_geo |>   slice_max(trips_modelled, n = 100) routes_osrm_minimal = stplanr::route(   l = od_geo_top_100,   route_fun = stplanr::route_osrm,   osrm.profile = \"foot\" ) routes_osrm_minimal |>   ggplot() +   geom_sf(alpha = 0.3, size = 9)"},{"path":"https://acteng.github.io/netgen/index.html","id":"locally-hosted-osrm","dir":"","previous_headings":"","what":"Locally hosted OSRM","title":"Generate Route Network Datasets from Origin-Destination Data","text":"can spin-local OSRM server calculate routes follows: system shell: generate something like: Note process used 532934656 bytes (532.9 MB) RAM. : Check alive follows: Now can run routes: Let’s visualise routes:","code":"location = osmextract::oe_match(   od_geo_top_100 |> sf::st_union() ) osmextract::oe_download(     location$url,     file_basename = \"osm.pbf\",     download_directory = \".\" ) docker run -t -v \"${PWD}:/data\" ghcr.io/project-osrm/osrm-backend osrm-extract -p /opt/car.lua /data/geofabrik_osm.pbf || echo \"osrm-extract failed\" docker run -t -v \"${PWD}:/data\" ghcr.io/project-osrm/osrm-backend osrm-extract -p /opt/car.lua /data/geofrabik_osm.osm.pbf || echo \"osrm-extract failed\" [2024-08-27T15:00:31.786775132] [info] Expansion: 766813 nodes/sec and 382310 edges/sec [2024-08-27T15:00:31.786776903] [info] To prepare the data for routing, run: ./osrm-contract \"/data/geofabrik_osm\" [2024-08-27T15:00:31.836550204] [info] RAM: peak bytes used: 532934656 docker run -t -v \"${PWD}:/data\" ghcr.io/project-osrm/osrm-backend osrm-partition /data/geofabrik_osm.osrm || echo \"osrm-partition failed\" docker run -t -v \"${PWD}:/data\" ghcr.io/project-osrm/osrm-backend osrm-customize /data/geofabrik_osm.osrm || echo \"osrm-customize failed\" docker run -t -i -p 5000:5000 -v \"${PWD}:/data\" ghcr.io/project-osrm/osrm-backend osrm-routed --algorithm mld /data/geofabrik_osm system('curl \"http://127.0.0.1:5000/route/v1/driving/13.388860,52.517037;13.385983,52.496891?steps=true\"') routes_osrm_2 = stplanr::route(   l = od_geo,   route_fun = stplanr::route_osrm,   osrm.profile = \"foot\",   osrm.server = \"http://127.0.0.1:5000/\" ) sf::write_sf(routes_osrm_2, \"routes_osrm_2.geojson\", delete_dsn = TRUE)  system(\"gh release upload v0.1.0 routes_osrm_2.geojson\") routes_osrm_2 |>   ggplot() +   geom_sf(alpha = 0.3, size = 9)"},{"path":[]},{"path":"https://acteng.github.io/netgen/index.html","id":"overline","dir":"","previous_headings":"","what":"Overline","title":"Generate Route Network Datasets from Origin-Destination Data","text":"overline() function R package stplanr one way generate route networks: disadvantage approach ’s computational resource-intensive takes long time. -progress od2net.","code":"names(routes_osrm_2) rnet = stplanr::overline(routes_osrm_2, attrib = \"trips_modelled\") plot(rnet)"},{"path":[]},{"path":[]},{"path":"https://acteng.github.io/netgen/odgen.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Generate origin-destination data for route network generation","text":"code results demonstrates generate origin-destination (OD) data given set zones destinations. OD data key input spatial interaction models (SIMs) generating route networks. (See introduction spatial interaction models: first principles introduction SIMs information.) code fully reproducible, although requires validation dataset public domain generate goodness--fit statistics shown reproducible document. Install package follows (can also clone repo run devtools::load_all()): package uses {simodels} R package pre-process input datasets generate OD data used basis interaction prediction model. input datasets illustrated figure (zones_york destinations_york provided pacage):  run models let’s compare total number pupils zones dataset destinations dataset (): one expect, total number pupils zones dataset bit bigger total number pupils destinations dataset: people aged 0 15 go school, especially school age. tackle issue ’ll create new variables called pupils_estimated zones dataset, sum number pupils zones dataset number pupils destinations dataset. adjustment shown , totals origin destination columns :","code":"if (!require(\"devtools\")) install.packages(\"devtools\") devtools::install_github(\"acteng/netgen\") zone_overestimate_factor =    (sum(zones_york$f0_to_15) + sum(zones_york$m0_to_15)) /     sum(destinations_york$n_pupils) zone_overestimate_factor [1] 1.194998 zones_york = zones_york |>   dplyr::mutate(     pupils_estimated = (f0_to_15 + m0_to_15) / zone_overestimate_factor   ) sum(zones_york$pupils_estimated) [1] 25631 sum(destinations_york$n_pupils) [1] 25631"},{"path":"https://acteng.github.io/netgen/odgen.html","id":"preprocessing","dir":"","previous_headings":"","what":"Preprocessing","title":"Generate origin-destination data for route network generation","text":"Based inputs si_to_od() function generates OD data, shown (note: 2 versions created, one maximum distance constraint speed processing, important working large datasets).   output OD dataset column names taken origin destination datasets, following column names:","code":"max_dist = 5000 # meters od_from_si_full = simodels::si_to_od(zones_york, destinations_york) od_from_si = simodels::si_to_od(zones_york, destinations_york, max_dist = max_dist) [1] \"O\"                                 \"D\"                                  [3] \"distance_euclidean\"                \"origin_LSOA21NM\"                    [5] \"origin_total\"                      \"origin_f0_to_15\"                    [7] \"origin_f16_to_29\"                  \"origin_f30_to_44\"                   [9] \"origin_f45_to_64\"                  \"origin_f65_and_over\"               [11] \"origin_m0_to_15\"                   \"origin_m16_to_29\"                  [13] \"origin_m30_to_44\"                  \"origin_m45_to_64\"                  [15] \"origin_m65_and_over\"               \"origin_pupils_estimated\"           [17] \"destination_n_pupils\"              \"destination_phase\"                 [19] \"destination_type_of_establishment\" \"geometry\""},{"path":[]},{"path":"https://acteng.github.io/netgen/odgen.html","id":"an-unconstrained-model","dir":"","previous_headings":"","what":"An unconstrained model","title":"Generate origin-destination data for route network generation","text":"Let’s run simple model: ’ll make one adjustment output dataset, renaming interaction column trips, setting total number trips total number pupils destinations dataset: can assess model fit three levels: origin level (number students departing zone), destination level (number arriving school input dataset) origin-destination level.  R-squared value 0.398.","code":"gravity_model = function(beta, d, m, n) {   m * n * exp(-beta * d / 1000) }  # perform SIM od_res = simodels::si_calculate(   od_from_si,   fun = gravity_model,   d = distance_euclidean,   m = origin_pupils_estimated,   n = destination_n_pupils, #   constraint_production = origin_all,   beta = 0.8   ) interaction_overestimate_factor = sum(destinations_york$n_pupils) / sum(od_res$interaction) od_res = od_res |>   dplyr::mutate(     interaction = interaction * interaction_overestimate_factor   )"},{"path":"https://acteng.github.io/netgen/odgen.html","id":"optimising-the-value-of-beta","dir":"","previous_headings":"","what":"Optimising the value of beta","title":"Generate origin-destination data for route network generation","text":"beta parameter gravity model key parameter determines strength distance decay effect. can optimise objective function minimises difference observed modelled trips: Let’s try re-running model new beta value:","code":"objective_function = function(beta) {   od_res = simodels::si_calculate(     od_from_si,     fun = gravity_model,     d = distance_euclidean,     m = origin_pupils_estimated,     n = destination_n_pupils,     beta = beta   )   interaction_overestimate_factor = sum(destinations_york$n_pupils) / sum(od_res$interaction)   od_res = od_res |>     dplyr::mutate(       trips = interaction * interaction_overestimate_factor     )   sum((od_res$trips - od_res$frequency)^2, na.rm = TRUE) } # Try it with beta of 0.8: objective_function(0.8) [1] 586859.6 # Optimise it: beta_opt = optimise(objective_function, c(0.1, 1)) beta_new = beta_opt$minimum beta_new [1] 0.9064594 res_optimised = simodels::si_calculate(   od_from_si,   fun = gravity_model,   d = distance_euclidean,   m = origin_pupils_estimated,   n = destination_n_pupils,   beta = beta_new   ) cor(res_optimised$frequency, res_optimised$interaction, use = \"complete.obs\")^2 [1] 0.4012082"},{"path":"https://acteng.github.io/netgen/odgen.html","id":"production-constrained-model","dir":"","previous_headings":"","what":"Production-constrained model","title":"Generate origin-destination data for route network generation","text":"Let’s see making model production constrained can help:  R-squared value 0.571.","code":"res_constrained = simodels::si_calculate(   od_from_si,   fun = gravity_model,   d = distance_euclidean,   m = origin_pupils_estimated,   n = destination_n_pupils,   constraint_production = origin_pupils_estimated,   beta = beta_new   )"},{"path":"https://acteng.github.io/netgen/odgen.html","id":"doubly-constrained-model","dir":"","previous_headings":"","what":"Doubly-constrained model","title":"Generate origin-destination data for route network generation","text":"Let’s implement doubly-constrained model, starting outputs production-constrained model:  R-squared value 0.58. model now ‘doubly constrained’ basic sense: first iteration constrains totals origin observed totals, second iteration constrains totals destination observed totals. Let’s constrain origin totals : destination totals : one full iteration fitting observed totals, R-squared value 0.594. Additional iterations increase model fit observed OD data case (working shown).","code":"res_doubly_constrained = res_constrained |>   group_by(D) |>   mutate(     observed_group = first(destination_n_pupils),     modelled_group = sum(interaction),     modelled_overestimate_factor = modelled_group / observed_group,     interaction = interaction / modelled_overestimate_factor   ) # summary(res_doubly_constrained) sum(res_doubly_constrained$interaction) == sum(res_constrained$interaction) [1] TRUE res_doubly_constrained_2 = res_doubly_constrained |>   group_by(O) |>   mutate(     observed_group = first(origin_pupils_estimated),     modelled_group = sum(interaction),     modelled_overestimate_factor = modelled_group / observed_group,     interaction = interaction / modelled_overestimate_factor   ) res_doubly_constrained_3 = res_doubly_constrained_2 |>   group_by(D) |>   mutate(     observed_group = first(destination_n_pupils),     modelled_group = sum(interaction),     modelled_overestimate_factor = modelled_group / observed_group,     interaction = interaction / modelled_overestimate_factor   )"},{"path":"https://acteng.github.io/netgen/odgen.html","id":"model-output","dir":"","previous_headings":"","what":"Model output","title":"Generate origin-destination data for route network generation","text":"model outputs OD data, columns listed : purposes project, ’ll use three : results saved .csv .geojson files ready next step:","code":"names(res_doubly_constrained_9) [1] \"O\"                                 \"D\"                                  [3] \"distance_euclidean\"                \"origin_LSOA21NM\"                    [5] \"origin_total\"                      \"origin_f0_to_15\"                    [7] \"origin_f16_to_29\"                  \"origin_f30_to_44\"                   [9] \"origin_f45_to_64\"                  \"origin_f65_and_over\"               [11] \"origin_m0_to_15\"                   \"origin_m16_to_29\"                  [13] \"origin_m30_to_44\"                  \"origin_m45_to_64\"                  [15] \"origin_m65_and_over\"               \"origin_pupils_estimated\"           [17] \"destination_n_pupils\"              \"destination_phase\"                 [19] \"destination_type_of_establishment\" \"frequency\"                         [21] \"geometry\"                          \"interaction\"                       [23] \"trips\"                             \"observed_group\"                    [25] \"modelled_group\"                    \"modelled_overestimate_factor\" res_output = res_doubly_constrained_9 |>   select(O, D, trips_modelled = interaction) summary(res_output) O                   D          trips_modelled               geometry     Length:4338        Min.   :121266   Min.   :  0.01305   LINESTRING   :4338    Class :character   1st Qu.:121711   1st Qu.:  0.72370   epsg:4326    :   0    Mode  :character   Median :142845   Median :  1.89543   +proj=long...:   0                       Mean   :137748   Mean   :  5.90848                                            3rd Qu.:144709   3rd Qu.:  5.61269                                            Max.   :150205   Max.   :224.64802 sf::write_sf(res_output, \"res_output.geojson\", delete_dsn = TRUE) res_output |>   sf::st_drop_geometry() |>   write_csv(\"res_output.csv\")"},{"path":"https://acteng.github.io/netgen/odgen.html","id":"summary-and-next-steps","dir":"","previous_headings":"","what":"Summary and next steps","title":"Generate origin-destination data for route network generation","text":"reproducible code vignette shows develop fast reproducible spatial interaction models (SIMs) using simodels package. simple model, using one estimated parameter (beta) can explain half variation flows, measured R-squared value. bad considering York river many Euclidean distances representative actual travel distances. many ways model refined: Using different models different types schools (e.g. primary secondary schools). Using route distance rather Euclidean distance estimate flows explore impact model fit. Adding parameters model, e.g. exponents origin destination populations (see Wilson’s work ). Using regression estimate impact variables flows Using complex model, radiation model. Scalability: worth exploring well approach scales LSOAs schools UK, example, example uses max_dist parameter od package (work progress integrate simodels package), see https://github.com/ITSLeeds/od/pull/48 details. purposes repo, however, demonstrated rapidly generate plausible OD data can feed network generation models.","code":""},{"path":"https://acteng.github.io/netgen/reference/destinations_york.html","id":null,"dir":"Reference","previous_headings":"","what":"Example destinations dataset: schools in York — destinations_york","title":"Example destinations dataset: schools in York — destinations_york","text":"Example dataset York, UK","code":""},{"path":"https://acteng.github.io/netgen/reference/destinations_york.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example destinations dataset: schools in York — destinations_york","text":"See data-raw/zones_york.qmd details data source.","code":""},{"path":"https://acteng.github.io/netgen/reference/destinations_york.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example destinations dataset: schools in York — destinations_york","text":"","code":"head(destinations_york) #> Simple feature collection with 6 features and 4 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -1.12961 ymin: 53.9411 xmax: -1.075572 ymax: 53.97109 #> Geodetic CRS:  WGS 84 #> # A tibble: 6 × 5 #>      URN n_pupils phase          type_of_establishment             geometry #>    <dbl>    <dbl> <chr>          <chr>                          <POINT [°]> #> 1 121266       71 Nursery        Local authority nurs…  (-1.12961 53.96336) #> 2 121270      160 Not applicable Pupil referral unit    (-1.07679 53.94355) #> 3 121273      211 Primary        Community school      (-1.129311 53.96382) #> 4 121276      308 Primary        Community school       (-1.110405 53.9411) #> 5 121277      309 Primary        Community school      (-1.075572 53.95183) #> 6 121283      423 Primary        Community school      (-1.092968 53.97109)"},{"path":"https://acteng.github.io/netgen/reference/make_elevation.html","id":null,"dir":"Reference","previous_headings":"","what":"Get elevation data — make_elevation","title":"Get elevation data — make_elevation","text":"function downloads elevation data source https://play.abstreet.org/dev/data/input/shared/elevation/UK-dem-50m-4326.tif.gz https://assets.od2net.org/input/LisboaIST_10m_4326.tif","code":""},{"path":"https://acteng.github.io/netgen/reference/make_elevation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get elevation data — make_elevation","text":"","code":"make_elevation(   url = NULL,   file = \"UK-dem-50m-4326.tif.gz\",   base_url = \"https://play.abstreet.org/dev/data/input/shared/elevation/\" )"},{"path":"https://acteng.github.io/netgen/reference/make_elevation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get elevation data — make_elevation","text":"url Full URL elevation dataset available file File name hosted known site base_url Base URL associated 'file' argument","code":""},{"path":"https://acteng.github.io/netgen/reference/make_zones.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a 'zones.geojson' file — make_zones","title":"Generate a 'zones.geojson' file — make_zones","text":"function requires zones file, e.g. \"https://raw.githubusercontent.com/nptscot/npt/main/data-raw/zones_edinburgh.geojson\" file computer. generate file input/ folder","code":""},{"path":"https://acteng.github.io/netgen/reference/make_zones.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a 'zones.geojson' file — make_zones","text":"","code":"make_zones(file)"},{"path":"https://acteng.github.io/netgen/reference/make_zones.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a 'zones.geojson' file — make_zones","text":"file Location URL zones file","code":""},{"path":"https://acteng.github.io/netgen/reference/zones_york.html","id":null,"dir":"Reference","previous_headings":"","what":"Example zones dataset: administrative zones of York — zones_york","title":"Example zones dataset: administrative zones of York — zones_york","text":"See data-raw/zones_york.qmd details data source.","code":""},{"path":"https://acteng.github.io/netgen/reference/zones_york.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example zones dataset: administrative zones of York — zones_york","text":"","code":"head(zones_york) #> Simple feature collection with 6 features and 13 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -1.143303 ymin: 53.90614 xmax: -1.075275 ymax: 53.97628 #> Geodetic CRS:  WGS 84 #>    LSOA21CD  LSOA21NM total f0_to_15 f16_to_29 f30_to_44 f45_to_64 f65_and_over #> 1 E01013335 York 012A  1626      164       115       215       202          158 #> 2 E01013336 York 012B  1545      109        75       162       221          210 #> 3 E01013337 York 012C  1651      127        98       167       236          198 #> 4 E01013338 York 012D  2358      203       194       268       300          258 #> 5 E01013339 York 012E  1602      128        91       149       246          194 #> 6 E01013340 York 024A  1275      117        53        95       217          160 #>   m0_to_15 m16_to_29 m30_to_44 m45_to_64 m65_and_over #> 1      169       151       170       180          102 #> 2      138       108       143       215          164 #> 3      151       104       175       229          166 #> 4      250       186       236       291          172 #> 5      133       109       134       251          167 #> 6      129       100        71       188          145 #>                         geometry #> 1 MULTIPOLYGON (((-1.128299 5... #> 2 MULTIPOLYGON (((-1.123884 5... #> 3 MULTIPOLYGON (((-1.133394 5... #> 4 MULTIPOLYGON (((-1.122007 5... #> 5 MULTIPOLYGON (((-1.11843 53... #> 6 MULTIPOLYGON (((-1.087652 5... sf:::plot.sfg(zones_york$geometry)"}]
