[{"path":"https://acteng.github.io/netgen/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"First Last. Author, maintainer.","code":""},{"path":"https://acteng.github.io/netgen/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Last F (2024). netgen: Package (One Line, Title Case). R package version 0.0.0.9000, https://acteng.github.io/netgen/.","code":"@Manual{,   title = {netgen: What the Package Does (One Line, Title Case)},   author = {First Last},   year = {2024},   note = {R package version 0.0.0.9000},   url = {https://acteng.github.io/netgen/}, }"},{"path":"https://acteng.github.io/netgen/index.html","id":"generate-origin-destination-data-for-route-network-generation","dir":"","previous_headings":"","what":"What the Package Does (One Line, Title Case)","title":"What the Package Does (One Line, Title Case)","text":"input network generation approaches demonstrated repo origin-destionation data. many sources OD data, see odgen way generate synthetic OD data ’ll use reproducible code .","code":""},{"path":"https://acteng.github.io/netgen/index.html","id":"setup","dir":"","previous_headings":"","what":"Setup","title":"What the Package Does (One Line, Title Case)","text":"R Python","code":"library(sf) library(tidyverse) library(tmap) # Get the datasets we'll use system(\"gh release download v0.1.0\") # theme void: theme_set(theme_void()) import pandas as pd import geopandas as gpd  # Get the datasets we'll use with os and subprocess: import subprocess subprocess.run([\"gh\", \"release\", \"download\", \"v0.1.0\"]) CompletedProcess(args=['gh', 'release', 'download', 'v0.1.0'], returncode=1)"},{"path":"https://acteng.github.io/netgen/index.html","id":"data-import-and-visualisation","dir":"","previous_headings":"","what":"Data import and visualisation","title":"What the Package Does (One Line, Title Case)","text":"’s worth importing visualising OD datasets routing network generation stages. R Python","code":"od = read_csv(\"res_output.csv\") head(od) # A tibble: 6 × 3   O              D trips_modelled   <chr>      <dbl>          <dbl> 1 E01013335 121266          6.37  2 E01013336 121266          3.26  3 E01013337 121266          4.57  4 E01013338 121266          6.46  5 E01013339 121266          2.95  6 E01013340 121266          0.124 od_geo = sf::read_sf(\"res_output.geojson\") od_geo |>   ggplot() +   geom_sf(aes(alpha = trips_modelled)) od = pd.read_csv(\"res_output.csv\") od.head() O       D  trips_modelled 0  E01013335  121266        6.372102 1  E01013336  121266        3.264443 2  E01013337  121266        4.566013 3  E01013338  121266        6.463300 4  E01013339  121266        2.953231 # TBC"},{"path":"https://acteng.github.io/netgen/index.html","id":"routing","dir":"","previous_headings":"","what":"Routing","title":"What the Package Does (One Line, Title Case)","text":"many ways calculate routes. simplest many cases calculate routing engine. Let’s interfaces OSRM routing engine first instance.","code":""},{"path":"https://acteng.github.io/netgen/index.html","id":"osrm-basic","dir":"","previous_headings":"","what":"OSRM: basic","title":"What the Package Does (One Line, Title Case)","text":"","code":"od_geo_top_100 = od_geo |>   slice_max(trips_modelled, n = 100) routes_osrm_minimal = stplanr::route(   l = od_geo_top_100,   route_fun = stplanr::route_osrm,   osrm.profile = \"foot\" ) routes_osrm_minimal = sf::read_sf(\"routes_osrm_minimal.geojson\") routes_osrm_minimal |>   ggplot() +   geom_sf(alpha = 0.3, size = 9)"},{"path":"https://acteng.github.io/netgen/index.html","id":"locally-hosted-osrm","dir":"","previous_headings":"","what":"Locally hosted OSRM","title":"What the Package Does (One Line, Title Case)","text":"can spin-local OSRM server calculate routes follows: system shell: generate something like: Note process used 532934656 bytes (532.9 MB) RAM. : Check alive follows: Now can run routes: Let’s visualise routes:","code":"location = osmextract::oe_match(   od_geo_top_100 |> sf::st_union() ) osmextract::oe_download(     location$url,     file_basename = \"osm.pbf\",     download_directory = \".\" ) [1] \"/home/robinlovelace-ate/github/acteng/netgen/geofabrik_osm.pbf\" docker run -t -v \"${PWD}:/data\" ghcr.io/project-osrm/osrm-backend osrm-extract -p /opt/car.lua /data/geofabrik_osm.pbf || echo \"osrm-extract failed\" docker run -t -v \"${PWD}:/data\" ghcr.io/project-osrm/osrm-backend osrm-extract -p /opt/car.lua /data/geofrabik_osm.osm.pbf || echo \"osrm-extract failed\" [2024-08-27T15:00:31.786775132] [info] Expansion: 766813 nodes/sec and 382310 edges/sec [2024-08-27T15:00:31.786776903] [info] To prepare the data for routing, run: ./osrm-contract \"/data/geofabrik_osm\" [2024-08-27T15:00:31.836550204] [info] RAM: peak bytes used: 532934656 docker run -t -v \"${PWD}:/data\" ghcr.io/project-osrm/osrm-backend osrm-partition /data/geofabrik_osm.osrm || echo \"osrm-partition failed\" docker run -t -v \"${PWD}:/data\" ghcr.io/project-osrm/osrm-backend osrm-customize /data/geofabrik_osm.osrm || echo \"osrm-customize failed\" docker run -t -i -p 5000:5000 -v \"${PWD}:/data\" ghcr.io/project-osrm/osrm-backend osrm-routed --algorithm mld /data/geofabrik_osm system('curl \"http://127.0.0.1:5000/route/v1/driving/13.388860,52.517037;13.385983,52.496891?steps=true\"') routes_osrm_2 = stplanr::route(   l = od_geo,   route_fun = stplanr::route_osrm,   osrm.profile = \"foot\",   osrm.server = \"http://127.0.0.1:5000/\" ) sf::write_sf(routes_osrm_2, \"routes_osrm_2.geojson\", delete_dsn = TRUE)  system(\"gh release upload v0.1.0 routes_osrm_2.geojson\") routes_osrm_2 |>   ggplot() +   geom_sf(alpha = 0.3, size = 9)"},{"path":[]},{"path":[]},{"path":"https://acteng.github.io/netgen/odgen.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Generate origin-destination data for route network generation","text":"code results demonstrates generate origin-destination (OD) data given set zones destinations. OD data key input spatial interaction models (SIMs) generating route networks. (See introduction spatial interaction models: first principles introduction SIMs information.) code fully reproducible, although requires validation dataset public domain generate goodness--fit statistics shown reproducible document. Install package follows (can also clone repo run devtools::load_all()): package uses {simodels} R package pre-process input datasets generate OD data used basis interaction prediction model. input datasets illustrated figure (zones_york destinations_york provided pacage):  run models let’s compare total number pupils zones dataset destinations dataset (): one expect, total number pupils zones dataset bit bigger total number pupils destinations dataset: people aged 0 15 go school, especially school age. tackle issue ’ll create new variables called pupils_estimated zones dataset, sum number pupils zones dataset number pupils destinations dataset. adjustment shown , totals origin destination columns :","code":"if (!require(\"devtools\")) install.packages(\"devtools\") devtools::install_github(\"acteng/netgen\") zone_overestimate_factor =    (sum(zones_york$f0_to_15) + sum(zones_york$m0_to_15)) /     sum(destinations_york$n_pupils) zone_overestimate_factor [1] 1.194998 zones_york = zones_york |>   dplyr::mutate(     pupils_estimated = (f0_to_15 + m0_to_15) / zone_overestimate_factor   ) sum(zones_york$pupils_estimated) [1] 25631 sum(destinations_york$n_pupils) [1] 25631"},{"path":"https://acteng.github.io/netgen/odgen.html","id":"preprocessing","dir":"","previous_headings":"","what":"Preprocessing","title":"Generate origin-destination data for route network generation","text":"Based inputs si_to_od() function generates OD data, shown (note: 2 versions created, one maximum distance constraint speed processing, important working large datasets).   output OD dataset column names taken origin destination datasets, following column names:","code":"max_dist = 5000 # meters od_from_si_full = simodels::si_to_od(zones_york, destinations_york) od_from_si = simodels::si_to_od(zones_york, destinations_york, max_dist = max_dist) [1] \"O\"                                 \"D\"                                  [3] \"distance_euclidean\"                \"origin_LSOA21NM\"                    [5] \"origin_total\"                      \"origin_f0_to_15\"                    [7] \"origin_f16_to_29\"                  \"origin_f30_to_44\"                   [9] \"origin_f45_to_64\"                  \"origin_f65_and_over\"               [11] \"origin_m0_to_15\"                   \"origin_m16_to_29\"                  [13] \"origin_m30_to_44\"                  \"origin_m45_to_64\"                  [15] \"origin_m65_and_over\"               \"origin_pupils_estimated\"           [17] \"destination_n_pupils\"              \"destination_phase\"                 [19] \"destination_type_of_establishment\" \"geometry\""},{"path":[]},{"path":"https://acteng.github.io/netgen/odgen.html","id":"an-unconstrained-model","dir":"","previous_headings":"","what":"An unconstrained model","title":"Generate origin-destination data for route network generation","text":"Let’s run simple model: ’ll make one adjustment output dataset, renaming interaction column trips, setting total number trips total number pupils destinations dataset: can assess model fit three levels: origin level (number students departing zone), destination level (number arriving school input dataset) origin-destination level.  R-squared value 0.398.","code":"gravity_model = function(beta, d, m, n) {   m * n * exp(-beta * d / 1000) }  # perform SIM od_res = simodels::si_calculate(   od_from_si,   fun = gravity_model,   d = distance_euclidean,   m = origin_pupils_estimated,   n = destination_n_pupils, #   constraint_production = origin_all,   beta = 0.8   ) interaction_overestimate_factor = sum(destinations_york$n_pupils) / sum(od_res$interaction) od_res = od_res |>   dplyr::mutate(     interaction = interaction * interaction_overestimate_factor   )"},{"path":"https://acteng.github.io/netgen/odgen.html","id":"optimising-the-value-of-beta","dir":"","previous_headings":"","what":"Optimising the value of beta","title":"Generate origin-destination data for route network generation","text":"beta parameter gravity model key parameter determines strength distance decay effect. can optimise objective function minimises difference observed modelled trips: Let’s try re-running model new beta value:","code":"objective_function = function(beta) {   od_res = simodels::si_calculate(     od_from_si,     fun = gravity_model,     d = distance_euclidean,     m = origin_pupils_estimated,     n = destination_n_pupils,     beta = beta   )   interaction_overestimate_factor = sum(destinations_york$n_pupils) / sum(od_res$interaction)   od_res = od_res |>     dplyr::mutate(       trips = interaction * interaction_overestimate_factor     )   sum((od_res$trips - od_res$frequency)^2, na.rm = TRUE) } # Try it with beta of 0.8: objective_function(0.8) [1] 586859.6 # Optimise it: beta_opt = optimise(objective_function, c(0.1, 1)) beta_new = beta_opt$minimum beta_new [1] 0.9064594 res_optimised = simodels::si_calculate(   od_from_si,   fun = gravity_model,   d = distance_euclidean,   m = origin_pupils_estimated,   n = destination_n_pupils,   beta = beta_new   ) cor(res_optimised$frequency, res_optimised$interaction, use = \"complete.obs\")^2 [1] 0.4012082"},{"path":"https://acteng.github.io/netgen/odgen.html","id":"production-constrained-model","dir":"","previous_headings":"","what":"Production-constrained model","title":"Generate origin-destination data for route network generation","text":"Let’s see making model production constrained can help:  R-squared value 0.571.","code":"res_constrained = simodels::si_calculate(   od_from_si,   fun = gravity_model,   d = distance_euclidean,   m = origin_pupils_estimated,   n = destination_n_pupils,   constraint_production = origin_pupils_estimated,   beta = beta_new   )"},{"path":"https://acteng.github.io/netgen/odgen.html","id":"doubly-constrained-model","dir":"","previous_headings":"","what":"Doubly-constrained model","title":"Generate origin-destination data for route network generation","text":"Let’s implement doubly-constrained model, starting outputs production-constrained model:  R-squared value 0.58. model now ‘doubly constrained’ basic sense: first iteration constrains totals origin observed totals, second iteration constrains totals destination observed totals. Let’s constrain origin totals : destination totals : one full iteration fitting observed totals, R-squared value 0.594. Additional iterations increase model fit observed OD data case (working shown).","code":"res_doubly_constrained = res_constrained |>   group_by(D) |>   mutate(     observed_group = first(destination_n_pupils),     modelled_group = sum(interaction),     modelled_overestimate_factor = modelled_group / observed_group,     interaction = interaction / modelled_overestimate_factor   ) # summary(res_doubly_constrained) sum(res_doubly_constrained$interaction) == sum(res_constrained$interaction) [1] TRUE res_doubly_constrained_2 = res_doubly_constrained |>   group_by(O) |>   mutate(     observed_group = first(origin_pupils_estimated),     modelled_group = sum(interaction),     modelled_overestimate_factor = modelled_group / observed_group,     interaction = interaction / modelled_overestimate_factor   ) res_doubly_constrained_3 = res_doubly_constrained_2 |>   group_by(D) |>   mutate(     observed_group = first(destination_n_pupils),     modelled_group = sum(interaction),     modelled_overestimate_factor = modelled_group / observed_group,     interaction = interaction / modelled_overestimate_factor   )"},{"path":"https://acteng.github.io/netgen/odgen.html","id":"model-output","dir":"","previous_headings":"","what":"Model output","title":"Generate origin-destination data for route network generation","text":"model outputs OD data, columns listed : purposes project, ’ll use three : results saved .csv .geojson files ready next step:","code":"names(res_doubly_constrained_9) [1] \"O\"                                 \"D\"                                  [3] \"distance_euclidean\"                \"origin_LSOA21NM\"                    [5] \"origin_total\"                      \"origin_f0_to_15\"                    [7] \"origin_f16_to_29\"                  \"origin_f30_to_44\"                   [9] \"origin_f45_to_64\"                  \"origin_f65_and_over\"               [11] \"origin_m0_to_15\"                   \"origin_m16_to_29\"                  [13] \"origin_m30_to_44\"                  \"origin_m45_to_64\"                  [15] \"origin_m65_and_over\"               \"origin_pupils_estimated\"           [17] \"destination_n_pupils\"              \"destination_phase\"                 [19] \"destination_type_of_establishment\" \"frequency\"                         [21] \"geometry\"                          \"interaction\"                       [23] \"trips\"                             \"observed_group\"                    [25] \"modelled_group\"                    \"modelled_overestimate_factor\" res_output = res_doubly_constrained_9 |>   select(O, D, trips_modelled = interaction) summary(res_output) O                   D          trips_modelled               geometry     Length:4338        Min.   :121266   Min.   :  0.01305   LINESTRING   :4338    Class :character   1st Qu.:121711   1st Qu.:  0.72370   epsg:4326    :   0    Mode  :character   Median :142845   Median :  1.89543   +proj=long...:   0                       Mean   :137748   Mean   :  5.90848                                            3rd Qu.:144709   3rd Qu.:  5.61269                                            Max.   :150205   Max.   :224.64802 sf::write_sf(res_output, \"res_output.geojson\", delete_dsn = TRUE) res_output |>   sf::st_drop_geometry() |>   write_csv(\"res_output.csv\")"},{"path":"https://acteng.github.io/netgen/odgen.html","id":"summary-and-next-steps","dir":"","previous_headings":"","what":"Summary and next steps","title":"Generate origin-destination data for route network generation","text":"reproducible code vignette shows develop fast reproducible spatial interaction models (SIMs) using simodels package. simple model, using one estimated parameter (beta) can explain half variation flows, measured R-squared value. bad considering York river many Euclidean distances representative actual travel distances. many ways model refined: Using different models different types schools (e.g. primary secondary schools). Using route distance rather Euclidean distance estimate flows explore impact model fit. Adding parameters model, e.g. exponents origin destination populations (see Wilson’s work ). Using regression estimate impact variables flows Using complex model, radiation model. Scalability: worth exploring well approach scales LSOAs schools UK, example, example uses max_dist parameter od package (work progress integrate simodels package), see https://github.com/ITSLeeds/od/pull/48 details. purposes repo, however, demonstrated rapidly generate plausible OD data can feed network generation models.","code":""},{"path":"https://acteng.github.io/netgen/reference/destinations_york.html","id":null,"dir":"Reference","previous_headings":"","what":"Example destinations dataset: schools in York — destinations_york","title":"Example destinations dataset: schools in York — destinations_york","text":"Example dataset York, UK","code":""},{"path":"https://acteng.github.io/netgen/reference/destinations_york.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example destinations dataset: schools in York — destinations_york","text":"See data-raw/zones_york.qmd details data source.","code":""},{"path":"https://acteng.github.io/netgen/reference/destinations_york.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example destinations dataset: schools in York — destinations_york","text":"","code":"head(destinations_york) #> Simple feature collection with 6 features and 4 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -1.12961 ymin: 53.9411 xmax: -1.075572 ymax: 53.97109 #> Geodetic CRS:  WGS 84 #> # A tibble: 6 × 5 #>      URN n_pupils phase          type_of_establishment             geometry #>    <dbl>    <dbl> <chr>          <chr>                          <POINT [°]> #> 1 121266       71 Nursery        Local authority nurs…  (-1.12961 53.96336) #> 2 121270      160 Not applicable Pupil referral unit    (-1.07679 53.94355) #> 3 121273      211 Primary        Community school      (-1.129311 53.96382) #> 4 121276      308 Primary        Community school       (-1.110405 53.9411) #> 5 121277      309 Primary        Community school      (-1.075572 53.95183) #> 6 121283      423 Primary        Community school      (-1.092968 53.97109)"},{"path":"https://acteng.github.io/netgen/reference/zones_york.html","id":null,"dir":"Reference","previous_headings":"","what":"Example zones dataset: administrative zones of York — zones_york","title":"Example zones dataset: administrative zones of York — zones_york","text":"See data-raw/zones_york.qmd details data source.","code":""},{"path":"https://acteng.github.io/netgen/reference/zones_york.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example zones dataset: administrative zones of York — zones_york","text":"","code":"head(zones_york) #> Simple feature collection with 6 features and 13 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -1.143303 ymin: 53.90614 xmax: -1.075275 ymax: 53.97628 #> Geodetic CRS:  WGS 84 #>    LSOA21CD  LSOA21NM total f0_to_15 f16_to_29 f30_to_44 f45_to_64 f65_and_over #> 1 E01013335 York 012A  1626      164       115       215       202          158 #> 2 E01013336 York 012B  1545      109        75       162       221          210 #> 3 E01013337 York 012C  1651      127        98       167       236          198 #> 4 E01013338 York 012D  2358      203       194       268       300          258 #> 5 E01013339 York 012E  1602      128        91       149       246          194 #> 6 E01013340 York 024A  1275      117        53        95       217          160 #>   m0_to_15 m16_to_29 m30_to_44 m45_to_64 m65_and_over #> 1      169       151       170       180          102 #> 2      138       108       143       215          164 #> 3      151       104       175       229          166 #> 4      250       186       236       291          172 #> 5      133       109       134       251          167 #> 6      129       100        71       188          145 #>                         geometry #> 1 MULTIPOLYGON (((-1.128299 5... #> 2 MULTIPOLYGON (((-1.123884 5... #> 3 MULTIPOLYGON (((-1.133394 5... #> 4 MULTIPOLYGON (((-1.122007 5... #> 5 MULTIPOLYGON (((-1.11843 53... #> 6 MULTIPOLYGON (((-1.087652 5... sf:::plot.sfg(zones_york$geometry)"}]
